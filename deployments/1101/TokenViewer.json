{
  "address": "0x964146859fE891Af960985314025Ce91f85fD189",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "getTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITokenViewer.TokenDto[]",
          "name": "results",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3aa5e4d40f2519b1b85a4c3417eaa4ee8bd209bc50fdc88ca26569df5fca2c1c",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0x964146859fE891Af960985314025Ce91f85fD189",
    "transactionIndex": 0,
    "gasUsed": "521272",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf6b039b9c2e7cb9345fd5685e504ae436c69cd9e6c74027d02c16e1df771a1a2",
    "transactionHash": "0x3aa5e4d40f2519b1b85a4c3417eaa4ee8bd209bc50fdc88ca26569df5fca2c1c",
    "logs": [],
    "blockNumber": 151665,
    "cumulativeGasUsed": "521272",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d772de97f6e04a9a7b2277f00a005418",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenViewer.TokenDto[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTokens(address[],address,address)\":{\"params\":{\"spender\":\"the address of the spender whose token information is to be retrieved\",\"tokens\":\"an array of addresses of token contracts\",\"user\":\"the address of the user whose token information is to be retrieved\"},\"returns\":{\"results\":\"an array of TokenDto objects containing information about the token contracts\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokens(address[],address,address)\":{\"notice\":\"getTokens is a function that retrieves information about a set of token contracts given their addresses and returns the information in the form of an array of TokenDto objects.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenViewer.sol\":\"TokenViewer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ITokenViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Clober-dex Contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Token Viewer Interface\\n * @dev ITokenViewer is an interface contract that provides the functionality to retrieve information\\n * about the balance and allowances of various token contracts.\\n *\\n * @author Clober\\n */\\ninterface ITokenViewer {\\n    struct TokenDto {\\n        address addr;\\n        string name;\\n        string symbol;\\n        uint256 decimals;\\n        uint256 balance;\\n        uint256 allowance;\\n    }\\n\\n    /**\\n     * getTokens is a function that retrieves information about a set of token contracts\\n     * given their addresses and returns the information in the form of an array of TokenDto objects.\\n     *\\n     * @param tokens an array of addresses of token contracts\\n     * @param user the address of the user whose token information is to be retrieved\\n     * @param spender the address of the spender whose token information is to be retrieved\\n     *\\n     * @return an array of TokenDto objects containing information about the token contracts\\n     */\\n    function getTokens(\\n        address[] calldata tokens,\\n        address user,\\n        address spender\\n    ) external view returns (TokenDto[] memory);\\n}\\n\",\"keccak256\":\"0xb2871ac7208547afefba65674b274b9dec9d15388b241694d7483642b7e2eec3\",\"license\":\"MIT\"},\"contracts/TokenViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Clober-dex Contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./ITokenViewer.sol\\\";\\n\\ncontract TokenViewer is ITokenViewer {\\n    function getTokens(\\n        address[] calldata tokens,\\n        address user,\\n        address spender\\n    ) external view returns (TokenDto[] memory results) {\\n        results = new TokenDto[](tokens.length + 1);\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            ERC20 token = ERC20(tokens[i]);\\n            results[i] = TokenDto({\\n                addr: tokens[i],\\n                name: token.name(),\\n                symbol: token.symbol(),\\n                decimals: token.decimals(),\\n                balance: user != address(0) ? token.balanceOf(user) : 0,\\n                allowance: spender != address(0) ? token.allowance(user, spender) : 0\\n            });\\n        }\\n        results[tokens.length] = TokenDto({\\n            addr: address(0),\\n            name: \\\"Ethereum\\\",\\n            symbol: \\\"ETH\\\",\\n            decimals: 18,\\n            balance: user != address(0) ? user.balance : 0,\\n            allowance: 0\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0xbf22e32844bffed686ef8dfdaef74c1500631879e83998fe5bdffb078fe4e8fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061087e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638b2b099914610030575b600080fd5b61004361003e36600461052c565b610059565b6040516100509190610611565b60405180910390f35b60606100668460016106df565b67ffffffffffffffff81111561007e5761007e6106f8565b6040519080825280602002602001820160405280156100f157816020015b6100de6040518060c0016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081525090565b81526020019060019003908161009c5790505b50905060005b848110156104195760008686838181106101135761011361070e565b90506020020160208101906101289190610724565b90506040518060c001604052808888858181106101475761014761070e565b905060200201602081019061015c9190610724565b6001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d09190810190610746565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023b9190810190610746565b8152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a291906107f3565b60ff1681526020016001600160a01b0387166102bf576000610342565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528416906370a0823190602401602060405180830381865afa15801561031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103429190610816565b81526020016001600160a01b03861661035c5760006103e7565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152878116602483015284169063dd62ed3e90604401602060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190610816565b8152508383815181106103fc576103fc61070e565b602002602001018190525050806104129061082f565b90506100f7565b506040518060c0016040528060006001600160a01b031681526020016040518060400160405280600881526020017f457468657265756d00000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f455448000000000000000000000000000000000000000000000000000000000081525081526020016012815260200160006001600160a01b0316856001600160a01b0316036104d35760006104df565b846001600160a01b0316315b8152600060209091015281518290869081106104fd576104fd61070e565b6020026020010181905250949350505050565b80356001600160a01b038116811461052757600080fd5b919050565b6000806000806060858703121561054257600080fd5b843567ffffffffffffffff8082111561055a57600080fd5b818701915087601f83011261056e57600080fd5b81358181111561057d57600080fd5b8860208260051b850101111561059257600080fd5b6020928301965094506105a89187019050610510565b91506105b660408601610510565b905092959194509250565b60005b838110156105dc5781810151838201526020016105c4565b50506000910152565b600081518084526105fd8160208601602086016105c1565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156106bb57603f19898403018552815160c06001600160a01b03825116855288820151818a87015261066f828701826105e5565b915050878201518582038987015261068782826105e5565b606084810151908801526080808501519088015260a093840151939096019290925250509386019390860190600101610638565b509098975050505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106f2576106f26106c9565b92915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561073657600080fd5b61073f82610510565b9392505050565b60006020828403121561075857600080fd5b815167ffffffffffffffff8082111561077057600080fd5b818401915084601f83011261078457600080fd5b815181811115610796576107966106f8565b604051601f8201601f19908116603f011681019083821181831017156107be576107be6106f8565b816040528281528760208487010111156107d757600080fd5b6107e88360208301602088016105c1565b979650505050505050565b60006020828403121561080557600080fd5b815160ff8116811461073f57600080fd5b60006020828403121561082857600080fd5b5051919050565b600060018201610841576108416106c9565b506001019056fea264697066735822122028d36f312ef82ac04cae9583b8bbc6480b6a4ae3c3142aab94e21321eeaed13b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638b2b099914610030575b600080fd5b61004361003e36600461052c565b610059565b6040516100509190610611565b60405180910390f35b60606100668460016106df565b67ffffffffffffffff81111561007e5761007e6106f8565b6040519080825280602002602001820160405280156100f157816020015b6100de6040518060c0016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081525090565b81526020019060019003908161009c5790505b50905060005b848110156104195760008686838181106101135761011361070e565b90506020020160208101906101289190610724565b90506040518060c001604052808888858181106101475761014761070e565b905060200201602081019061015c9190610724565b6001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d09190810190610746565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023b9190810190610746565b8152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a291906107f3565b60ff1681526020016001600160a01b0387166102bf576000610342565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528416906370a0823190602401602060405180830381865afa15801561031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103429190610816565b81526020016001600160a01b03861661035c5760006103e7565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152878116602483015284169063dd62ed3e90604401602060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190610816565b8152508383815181106103fc576103fc61070e565b602002602001018190525050806104129061082f565b90506100f7565b506040518060c0016040528060006001600160a01b031681526020016040518060400160405280600881526020017f457468657265756d00000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f455448000000000000000000000000000000000000000000000000000000000081525081526020016012815260200160006001600160a01b0316856001600160a01b0316036104d35760006104df565b846001600160a01b0316315b8152600060209091015281518290869081106104fd576104fd61070e565b6020026020010181905250949350505050565b80356001600160a01b038116811461052757600080fd5b919050565b6000806000806060858703121561054257600080fd5b843567ffffffffffffffff8082111561055a57600080fd5b818701915087601f83011261056e57600080fd5b81358181111561057d57600080fd5b8860208260051b850101111561059257600080fd5b6020928301965094506105a89187019050610510565b91506105b660408601610510565b905092959194509250565b60005b838110156105dc5781810151838201526020016105c4565b50506000910152565b600081518084526105fd8160208601602086016105c1565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156106bb57603f19898403018552815160c06001600160a01b03825116855288820151818a87015261066f828701826105e5565b915050878201518582038987015261068782826105e5565b606084810151908801526080808501519088015260a093840151939096019290925250509386019390860190600101610638565b509098975050505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106f2576106f26106c9565b92915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561073657600080fd5b61073f82610510565b9392505050565b60006020828403121561075857600080fd5b815167ffffffffffffffff8082111561077057600080fd5b818401915084601f83011261078457600080fd5b815181811115610796576107966106f8565b604051601f8201601f19908116603f011681019083821181831017156107be576107be6106f8565b816040528281528760208487010111156107d757600080fd5b6107e88360208301602088016105c1565b979650505050505050565b60006020828403121561080557600080fd5b815160ff8116811461073f57600080fd5b60006020828403121561082857600080fd5b5051919050565b600060018201610841576108416106c9565b506001019056fea264697066735822122028d36f312ef82ac04cae9583b8bbc6480b6a4ae3c3142aab94e21321eeaed13b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTokens(address[],address,address)": {
        "params": {
          "spender": "the address of the spender whose token information is to be retrieved",
          "tokens": "an array of addresses of token contracts",
          "user": "the address of the user whose token information is to be retrieved"
        },
        "returns": {
          "results": "an array of TokenDto objects containing information about the token contracts"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokens(address[],address,address)": {
        "notice": "getTokens is a function that retrieves information about a set of token contracts given their addresses and returns the information in the form of an array of TokenDto objects."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}